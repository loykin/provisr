name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build binaries
    runs-on: ubuntu-latest
    env:
      CGO_ENABLED: 0
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          cache: true

      - name: Show Go version
        run: go version

      - name: Build
        shell: bash
        run: |
          mkdir -p dist
          BIN_NAME=provisr
          EXT=""
          if [ "${{ matrix.goos }}" = "windows" ]; then EXT=".exe"; fi
          BIN_FILE="${BIN_NAME}${EXT}"
          OUT_DIR="${BIN_NAME}_${{ matrix.goos }}_${{ matrix.goarch }}"

          echo "Building $BIN_FILE for $OUT_DIR"
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o "$BIN_FILE" ./cmd/provisr

          mkdir -p "$OUT_DIR/bin"
          cp "$BIN_FILE" "$OUT_DIR/bin/"
          [ -f README.md ] && cp README.md "$OUT_DIR/"
          [ -f LICENSE ] && cp LICENSE "$OUT_DIR/"
          if [ -d config ]; then
            cp -R config "$OUT_DIR/"
            find "$OUT_DIR/config" -name '*.db' -type f -delete || true
          fi

          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip -9 -r "dist/${OUT_DIR}.zip" "$OUT_DIR"
          else
            tar -czf "dist/${OUT_DIR}.tar.gz" "$OUT_DIR"
          fi

          rm -rf "$OUT_DIR" "$BIN_FILE"


      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*
          if-no-files-found: error

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build

    permissions:
      contents: write
      id-token: write   # ðŸ”‘ cosign keyless signing / provenance requires this

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: binaries-*
          merge-multiple: true

      - name: Display files to release
        run: ls -la

      - name: Generate checksums
        run: |
          sha256sum *.tar.gz *.zip > checksums.txt
          cat checksums.txt

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign artifacts with cosign
        run: |
          for f in *.tar.gz *.zip checksums.txt; do
          cosign sign-blob --yes $f \
            --output-signature $f.sig \
            --output-certificate $f.pem
          done
        env:
          COSIGN_EXPERIMENTAL: "true"

      - name: Generate provenance
        run: |
          for f in *.tar.gz *.zip; do
          cosign attest-blob --yes $f \
            --type slsaprovenance \
            --predicate <(echo "{
              \"buildType\": \"https://slsa.dev/container/v1\",
              \"builder\": { \"id\": \"https://github.com/loykin/provisr\" },
              \"invocation\": { \"configSource\": { \"uri\": \"git+https://github.com/loykin/provisr@${GITHUB_REF_NAME}\" } }
            }") \
            --output-attestation $f.intoto.jsonl \
            --output-certificate $f.pem
          done
        env:
          COSIGN_EXPERIMENTAL: "true"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            *.tar.gz
            *.zip
            checksums.txt
            *.sig
            *.intoto.jsonl
          generate_release_notes: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
