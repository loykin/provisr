name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  vet:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - run: go mod download
      - run: go vet ./...

  staticcheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - run: go mod download
      - run: go install honnef.co/go/tools/cmd/staticcheck@latest
      - run: $(go env GOPATH)/bin/staticcheck ./...

  gosec:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - run: go mod download
      - run: go install github.com/securego/gosec/v2/cmd/gosec@latest
      - run: |
          $(go env GOPATH)/bin/gosec -no-fail -fmt=json -out=gosec-report.json ./...
      - uses: actions/upload-artifact@v3
        with:
          name: gosec-report
          path: gosec-report.json

  trivy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          format: json
          output: trivy-report.json
      - uses: actions/upload-artifact@v3
        with:
          name: trivy-report
          path: trivy-report.json

  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - run: go mod download

      # Run tests with coverage
      - name: Run tests with coverage
        env:
          CGO_ENABLED: 1
        run: go test -p 1 -race -covermode=atomic -coverprofile=coverage.out $(go list ./... | grep -v '/examples')

      - name: Show coverage summary
        run: go tool cover -func=coverage.out | tail -n 1

      - uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage.out

      # Run all examples (safe + embedded_client with daemon)
      - name: Run examples
        run: |
          set -e
          # Safe examples
          go run ./examples/embedded
          go run ./examples/embedded_process_group
          go run ./examples/embedded_logger
          go run ./examples/embedded_metrics
          go run ./examples/embedded_config_structure
          go run ./examples/embedded_config_file

          # Embedded_client with daemon
          go build -o provisr-ci ./cmd/provisr
          ./provisr-ci serve examples/embedded_client/daemon-config.toml &
          DAEMON_PID=$!
          sleep 3

          for i in {1..10}; do
            if timeout 5s curl -s http://localhost:8080/api/status 2>/dev/null | grep -q "ok"; then
              break
            fi
            if [ $i -eq 10 ]; then
              echo "Daemon failed to start after 10 attempts"
              kill $DAEMON_PID 2>/dev/null || true
              exit 1
            fi
            sleep 2
          done

          go run ./examples/embedded_client
          kill $DAEMON_PID || true
          wait $DAEMON_PID 2>/dev/null || true
        env:
          CI: true

  publish-coverage:
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v3
        with:
          name: coverage
          path: .

      - name: Extract coverage percentage
        shell: bash
        run: |
          set -euo pipefail
          LINE=$(go tool cover -func=coverage.out | tail -n 1)
          PCT=$(echo "$LINE" | awk '{print $3}')
          PCT_NUM=${PCT%%%}
          if [ "${PCT_NUM%.*}" -ge 80 ]; then COLOR=brightgreen
          elif [ "${PCT_NUM%.*}" -ge 60 ]; then COLOR=yellow
          else COLOR=red
          fi
          echo "COVERAGE=$PCT_NUM" >> "$GITHUB_ENV"
          echo "BADGE_COLOR=$COLOR" >> "$GITHUB_ENV"

      - name: Prepare Shields endpoint JSON
        shell: bash
        run: |
          mkdir -p shields
          cat > shields/coverage.json <<EOF
          {
            "schemaVersion": 1,
            "label": "coverage",
            "message": "${COVERAGE}%",
            "color": "${BADGE_COLOR}"
          }
          EOF

      - name: Publish coverage endpoint to gh-pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: shields
          destination_dir: shields
          keep_files: true
          commit_message: "chore(ci): publish coverage endpoint (Shields)"

      - name: Download Trivy report artifact
        uses: actions/download-artifact@v3
        with:
          name: trivy-report
          path: .

      - name: Prepare Trivy Shields JSON (severity-based)
        shell: bash
        run: |
          mkdir -p shields
          CRITICAL=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-report.json)
          HIGH=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-report.json)
          MEDIUM=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' trivy-report.json)
          LOW=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="LOW")] | length' trivy-report.json)

          TOTAL=$((CRITICAL + HIGH + MEDIUM + LOW))

          if [ $((CRITICAL + HIGH)) -gt 0 ]; then
            COLOR=red
          elif [ $MEDIUM -gt 0 ]; then
            COLOR=yellow
          else
            COLOR=brightgreen
          fi

          echo "{\"schemaVersion\":1,\"label\":\"Trivy\",\"message\":\"$TOTAL\",\"color\":\"$COLOR\"}" > shields/trivy.json

      - name: Publish Trivy badge to gh-pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: shields
          destination_dir: shields
          keep_files: true
          commit_message: "chore(ci): publish Trivy badge (Shields)"
