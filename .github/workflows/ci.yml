name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  test:
    name: Go Test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    env:
      CGO_ENABLED: 0
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          cache: true

      - name: Show Go version
        run: go version

      - name: Download dependencies
        run: go mod download

      - name: Vet
        run: go vet ./...

      - name: Install staticcheck (Linux only)
        if: runner.os == 'Linux'
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Staticcheck (Linux only)
        if: runner.os == 'Linux'
        run: $(go env GOPATH)/bin/staticcheck ./...

      - name: Install gosec (Linux only)
        if: runner.os == 'Linux'
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: Run gosec (static analysis) (Linux only)
        if: runner.os == 'Linux'
        run: |
          set -e
          $(go env GOPATH)/bin/gosec -no-fail -fmt=json -out=gosec-report.json ./...

      - name: Upload gosec report artifact (Linux only)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: gosec-report
          path: gosec-report.json

      - name: Trivy Scan (Go dependencies) (Linux only)
        if: runner.os == 'Linux'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          format: json
          output: trivy-report.json

      - name: Upload Trivy report artifact (Linux only)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

      - name: Build (all packages)
        run: go build ./...

      - name: Run safe examples (self-contained, no external services)
        run: |
          set -e
          echo "Running examples/embedded"
          go run ./examples/embedded
          echo "Running examples/embedded_process_group"
          go run ./examples/embedded_process_group
          echo "Running examples/embedded_logger"
          go run ./examples/embedded_logger
          echo "Running examples/embedded_metrics"
          go run ./examples/embedded_metrics
          echo "Running examples/embedded_config_structure"
          go run ./examples/embedded_config_structure
          echo "Running examples/embedded_config_file"
          go run ./examples/embedded_config_file
        env:
          CI: true

      - name: Run embedded_client with daemon
        run: |
          set -e
          echo "Building provisr binary for daemon"
          go build -o provisr-ci ./cmd/provisr

          echo "Starting provisr daemon in background"
          ./provisr-ci serve examples/embedded_client/daemon-config.toml &
          DAEMON_PID=$!

          echo "Waiting for daemon to start..."
          sleep 5

          # Check if daemon is responding (using direct HTTP call)
          echo "Checking daemon readiness..."
          for i in {1..15}; do
            if curl -s --connect-timeout 2 --max-time 5 http://localhost:8080/api/status 2>/dev/null | grep -q "ok"; then
              echo "Daemon is ready"
              break
            fi
            if [ $i -eq 15 ]; then
              echo "Daemon failed to start after 15 attempts"
              echo "Checking if daemon process is still running..."
              if kill -0 $DAEMON_PID 2>/dev/null; then
                echo "Daemon process is running but not responding to API calls"
              else
                echo "Daemon process has died"
              fi
              kill $DAEMON_PID 2>/dev/null || true
              exit 1
            fi
            echo "Waiting for daemon... ($i/15)"
            sleep 2
          done

          echo "Running examples/embedded_client"
          go run ./examples/embedded_client

          echo "Stopping daemon"
          kill $DAEMON_PID || true
          wait $DAEMON_PID 2>/dev/null || true

          echo "âœ… embedded_client example completed successfully"
        env:
          CI: true

      - name: Run tests with coverage (Linux only)
        if: runner.os == 'Linux'
        env:
          CGO_ENABLED: 1
        run: go test -p 1 -race -covermode=atomic -coverprofile=coverage.out $(go list ./... | grep -v '/examples')

      - name: Run tests (macOS)
        if: runner.os == 'Darwin'
        run: go test ./... -v

      - name: Show coverage summary (Linux only)
        if: runner.os == 'Linux'
        run: go tool cover -func=coverage.out | tail -n 1

      - name: Upload coverage artifact (Linux only)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.out

  publish-coverage:
    name: Publish Coverage (Shields)
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: .

      - name: Extract coverage percentage
        shell: bash
        run: |
          set -euo pipefail
          LINE=$(go tool cover -func=coverage.out | tail -n 1)
          PCT=$(echo "$LINE" | awk '{print $3}')
          PCT_NUM=${PCT%%%}
          if [ "${PCT_NUM%.*}" -ge 80 ]; then COLOR=brightgreen
          elif [ "${PCT_NUM%.*}" -ge 60 ]; then COLOR=yellow
          else COLOR=red
          fi
          echo "COVERAGE=$PCT_NUM" >> "$GITHUB_ENV"
          echo "BADGE_COLOR=$COLOR" >> "$GITHUB_ENV"

      - name: Prepare Shields endpoint JSON
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p shields
          cat > shields/coverage.json <<EOF
          {
            "schemaVersion": 1,
            "label": "coverage",
            "message": "${COVERAGE}%",
            "color": "${BADGE_COLOR}"
          }
          EOF

      - name: Publish coverage endpoint to gh-pages
        uses: peaceiris/actions-gh-pages@4f9cc6602d3f66b9c108549d475ec49e8ef4d45e
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: shields
          destination_dir: shields
          keep_files: true
          commit_message: "chore(ci): publish coverage endpoint (Shields)"

      - name: Download Trivy report artifact
        uses: actions/download-artifact@v4
        with:
          name: trivy-report
          path: .

      - name: Prepare Trivy Shields JSON (severity-based)
        shell: bash
        run: |
          mkdir -p shields
          CRITICAL=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-report.json)
          HIGH=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-report.json)
          MEDIUM=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' trivy-report.json)
          LOW=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="LOW")] | length' trivy-report.json)

          TOTAL=$((CRITICAL + HIGH + MEDIUM + LOW))

          if [ $((CRITICAL + HIGH)) -gt 0 ]; then
            COLOR=red
          elif [ $MEDIUM -gt 0 ]; then
            COLOR=yellow
          else
            COLOR=brightgreen
          fi

          echo "{\"schemaVersion\":1,\"label\":\"Trivy\",\"message\":\"$TOTAL\",\"color\":\"$COLOR\"}" > shields/trivy.json

      - name: Publish Trivy badge to gh-pages
        uses: peaceiris/actions-gh-pages@4f9cc6602d3f66b9c108549d475ec49e8ef4d45e
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: shields
          destination_dir: shields
          keep_files: true
          commit_message: "chore(ci): publish Trivy badge (Shields)"
