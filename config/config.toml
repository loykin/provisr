# provisr sample configuration (TOML)
# You can run:  provisr -config config/config.toml
# This file demonstrates all supported fields.

# Global environment for all processes
env = ["GLOBAL_NAME=provisr", "SHARED_PORT=9000", "CHAIN=${GLOBAL_NAME}-x"]
# Optionally load additional env from files and/or include OS environment
# env_files = ["/path/to/.env"]
# use_os_env = true

# Default directory for process PID files (when spec.pid_file is not set)
# Relative paths are resolved relative to this config file location
pid_dir = "./run"

# Optional global log defaults
[log]
dir = "./provisr-logs"
max_size_mb = 10
max_backups = 3
max_age_days = 7
compress = false

# Process definitions are now in config/programs/*.toml files
# This allows for better organization and management of individual processes
# Each process can have its own configuration file in config/programs/

# Groups section: define logical groups referencing processes by name
[[groups]]
name = "backend"
members = ["api-server", "long-sleeper"]

# Persistent store has been removed. State is managed in-memory with PID-file based recovery.

# Optional HTTP API server configuration
# When enabled, `provisr serve --config config/config.toml` will start an HTTP server.
# You can override these with CLI flags: --api-listen and --api-base.
# Optional History configuration (separate from store state)
# Controls whether to record append-only history rows inside the store and/or
# export lifecycle events to external systems like OpenSearch or ClickHouse.
# When omitted, defaults are: in_store=true and no external exports.
[history]
# Master enable for external exports (sinks) defined below
enabled = false
# Toggle recording history rows in the configured store (if any)
# Set to false to keep state only without history rows
in_store = true
# Optional OpenSearch sink
# opensearch_url = "http://localhost:9200"
# opensearch_index = "provisr-history"
# Optional ClickHouse sink (HTTP interface)
# clickhouse_url = "http://localhost:8123"
# clickhouse_table = "default.provisr_history"

[server]
# Enable the HTTP API server (set to true to allow starting from config)
enabled = true
# Listen address, e.g. ":8080" or "127.0.0.1:8080"
listen = ":8080"
# Base path for endpoints: {base}/start, {base}/stop, {base}/status
base_path = "/api"
# Optional: PID file for the provisr daemon itself (used when --daemonize is set)
# When set, the daemon will write its PID to this path.
pidfile = "./provisr.pid"
# Optional: Daemon log file path (when running with --daemonize)
# If not set here, you can still pass --logfile via CLI.
logfile = "./provisr.log"

# TLS configuration for HTTPS server (optional)
# When enabled, the server will use HTTPS instead of HTTP
[server.tls]
# Enable TLS (set to true to use HTTPS)
enabled = false
# Option 1: Use specific certificate files
# cert_file = "/path/to/server.crt"
# key_file = "/path/to/server.key"
# Option 2: Use directory with standard filenames (tls.crt, tls.key)
# dir = "./tls"
# Option 3: Auto-generate self-signed certificates (development only)
# dir = "./tls"
# auto_generate = true
# TLS version constraints (optional)
# tls_min_version = "1.2"  # or "1.3"
# tls_max_version = "1.3"

# Auto-generation settings (when auto_generate = true)
[server.tls.auto_gen]
# Certificate common name
common_name = "localhost"
# Organization name
organization = "provisr"
# DNS names for Subject Alternative Names
dns_names = ["localhost", "127.0.0.1", "provisr.local"]
# IP addresses for Subject Alternative Names
ip_addresses = ["127.0.0.1"]
# Certificate validity period in days
valid_days = 365

# Optional Prometheus metrics server configuration
# When enabled, exposes metrics on /metrics endpoint
[metrics]
# Enable the metrics server (set to true to serve Prometheus metrics)
enabled = false
# Listen address for metrics server, e.g. ":9090" or "127.0.0.1:9090"
listen = ":9090"

# Process monitoring configuration
[metrics.process_metrics]
# Enable CPU and memory monitoring for managed processes
enabled = false
# Collection interval for process metrics
interval = "5s"
# Maximum number of historical metrics to keep per process
max_history = 100
