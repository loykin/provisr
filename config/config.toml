# provisr sample configuration (TOML)
# You can run:  provisr -config config/config.toml
# This file demonstrates all supported fields.

# Global environment for all processes
env = ["GLOBAL_NAME=provisr", "SHARED_PORT=9000", "CHAIN=${GLOBAL_NAME}-x"]
# Optionally load additional env from files and/or include OS environment
# env_files = ["/path/to/.env"]
# use_os_env = true

# Optional global log defaults
[log]
dir = "/tmp/provisr-logs"
max_size_mb = 10
max_backups = 3
max_age_days = 7
compress = false

# Process definitions
[[processes]]
# Unique process name (base name if instances > 1)
name = "web"
# Command to run (executed via sh -c)
command = "python3 -m http.server 8080"
# Optional working directory
workdir = "/tmp"
# Optional environment variables
env = ["ENV=prod", "PORT=8080"]
# Optional PID file path (also used by the built-in pidfile detector below)
pidfile = "/tmp/web.pid"
# Start retry configuration
retries = 3
retry_interval = "500ms"
# Consider the start successful only if the process stays up this long
startsecs = "2s"
# Auto-restart when the process exits unexpectedly
autorestart = true
restart_interval = "1s"
# Start multiple instances with names web-1..web-3
instances = 3
# Per-process logging override example
[processes.log]
stdout = "/tmp/provisr-logs/web.stdout.log"
stderr = "/tmp/provisr-logs/web.stderr.log"
# Example schedule (cron-like): here we schedule a separate job below instead of the service
# schedule = "@every 5s"
# Optional detectors to determine liveness
[[processes.detectors]]
type = "pidfile"
path = "/tmp/web.pid"
[[processes.detectors]]
# Example of a command detector (returns success when process is alive)
type = "command"
command = "pgrep -f 'python3 -m http.server 8080' >/dev/null"

[[processes]]
name = "worker"
command = "sh -c 'while true; do echo working; sleep 1; done'"
# No pidfile; rely on a command detector
retries = 1
retry_interval = "300ms"
startsecs = "500ms"
autorestart = true
restart_interval = "1s"
instances = 1
[[processes.detectors]]
type = "command"
command = "pgrep -f 'echo working' >/dev/null"

# Another simple example with a fixed external PID detector (rarely used in practice)
[[processes]]
name = "external"
command = "sleep 60"
retries = 0
retry_interval = "500ms"
startsecs = "0s"
autorestart = false
instances = 1
# Suppose an external service has PID 1234 (replace with real pid)
[[processes.detectors]]
type = "pid"
pid = 1234

# A pure cron job: run a one-off task every 5 seconds without autorestart
[[processes]]
name = "cron-clean"
command = "sh -c 'echo cleaning'"
schedule = "@every 5s"
singleton = true

# Groups section: define logical groups referencing processes by name
[[groups]]
name = "backend"
members = ["web", "worker"]

# Persistent store configuration (optional)
# Enable to persist process lifecycle and support high availability across restarts.
# You can also control this via CLI: --store-dsn to enable/select DSN, or --no-store to disable.
# Supported DSNs:
#   - SQLite:   "sqlite:///tmp/provisr.db"   (or a bare path like "/tmp/provisr.db")
#   - In-memory SQLite for testing: "sqlite::memory:" or "sqlite://:memory:"
#   - Postgres: "postgres://user:pass@host:port/dbname?sslmode=disable"
[store]
# Set to true to enable the persistent store
enabled = true
# Default to SQLite on local filesystem; adjust path as needed
dsn = "sqlite:///tmp/provisr.db"
# Example Postgres DSN (uncomment to use instead)
# dsn = "postgres://user:pass@127.0.0.1:5432/provisr?sslmode=disable"

# Optional HTTP API server configuration
# When enabled, `provisr serve --config config/config.toml` will start an HTTP server.
# You can override these with CLI flags: --api-listen and --api-base.
# Optional History configuration (separate from store state)
# Controls whether to record append-only history rows inside the store and/or
# export lifecycle events to external systems like OpenSearch or ClickHouse.
# When omitted, defaults are: in_store=true and no external exports.
[history]
# Master enable for external exports (sinks) defined below
enabled = false
# Toggle recording history rows in the configured store (if any)
# Set to false to keep state only without history rows
in_store = true
# Optional OpenSearch sink
# opensearch_url = "http://localhost:9200"
# opensearch_index = "provisr-history"
# Optional ClickHouse sink (HTTP interface)
# clickhouse_url = "http://localhost:8123"
# clickhouse_table = "default.provisr_history"

[http_api]
# Enable the HTTP API server (set to true to allow starting from config)
enabled = true
# Listen address, e.g. ":8080" or "127.0.0.1:8080"
listen = ":8080"
# Base path for endpoints: {base}/start, {base}/stop, {base}/status
base_path = "/api"
